// ================================================================================================================================
// ================================================================================================================================
// ================================================================================================================================

#ifndef _GDEFS_H_
#define _GDEFS_H_

// ================================================================================================================================
// ================================================================================================================================

#include "display.h"
#include "stdint.h"

// ================================================================================================================================
// ================================================================================================================================

#define UNREFERENCED_PARAMETER(P)               (P = P)
#define UNREFERENCED_LOCAL_VARIABLE(V)          (V = V)

// --------------------------------------------------------------------------------------------------------------------------------

#define ROUND_UP(val, align)                    ((((val) % (align))==0)?(val):((val) + ((align) - ((val) % (align)))))
#define ROUND_DOWN(val, align)                  ((((val) % (align))==0)?(val):((val) - ((val) % (align))))

// --------------------------------------------------------------------------------------------------------------------------------

#define MIN(x, y)                               (((x) < (y)) ? (x) : (y))
#define MAX(x, y)                               (((x) > (y)) ? (x) : (y))

// --------------------------------------------------------------------------------------------------------------------------------

#define TRUE                                    1
#define True                                    TRUE
#define true                                    TRUE

#define FALSE                                   0
#define False                                   FALSE
#define false                                   FALSE

// ================================================================================================================================
// ================================================================================================================================

void    okEnd (void);
void    errEnd (void);

void    asmCLI (void);
void    asmSTI (void);

void    asmHLT (void);

// ================================================================================================================================
// ================================================================================================================================

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

static inline char  charToLower (char character)
{
    if (character >= 'A' && character <= 'Z')
    {
        return (char)((BYTE) character + 32);
    }
    else
    {
        return character;
    }
}
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

static inline char  charToUpper (char character)
{
    if (character >= 'a' && character <= 'z')
    {
        return (char)((BYTE) character - 32);
    }
    else
    {
        return character;
    }
}

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

static inline BYTE  inB (WORD port)
{
    BYTE    data;

    asm (
        ".intel_syntax noprefix\n\t"
        "IN         AL,         %1\n\t"
        "MOV        %0,         AL"
        :"=r" (data)
        :"r"  (port)
        :"al"
    );

    return  data;
}

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

static inline WORD  inW (WORD port)
{
    WORD    data;

    asm (
        ".intel_syntax noprefix\n\t"
        "IN         AX,         %1\n\t"
        "MOV        %0,         AX"
        :"=r" (data)
        :"r"  (port)
        :"ax"
    );

    return  data;
}

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

static inline void  outB (WORD port, BYTE data)
{
    asm (
        ".intel_syntax noprefix\n\t"
        "OUT        %1,         %0"
        :
        :"r" (data), "r" (port)
        :
    );
}

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

static inline void  outW (WORD port, WORD data)
{
    asm (
        ".intel_syntax noprefix\n\t"
        "OUT        %1,         %0"
        :
        :"r" (data), "r" (port)
        :
    );
}

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// ================================================================================================================================
// ================================================================================================================================

#endif // _GDEFS_H_

// ================================================================================================================================
// ================================================================================================================================
// ================================================================================================================================
